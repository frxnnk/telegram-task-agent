const { testConnection, getTeams, createProject, createIssue } = require('./linear-setup');

// Roadmap completo atomizado en tareas espec√≠ficas
const ROADMAP_TASKS = [
  {
    title: "RELY-50: Linear Integration - Mostrar tableros y tareas",
    description: `
**Objetivo:** Integrar Linear API para mostrar tableros y tareas disponibles via Telegram

**Especificaciones:**
- Comando /linear que muestre todos los tableros activos
- Comando /tasks [board_id] que liste tareas del tablero
- Formato visual con estados, prioridades y asignados
- Filtros por estado (Todo, In Progress, Done)
- Selecci√≥n de tareas para atomizaci√≥n

**Criterios de aceptaci√≥n:**
- ‚úÖ Usuario puede ver todos sus tableros Linear
- ‚úÖ Lista de tareas filtrable por estado
- ‚úÖ Informaci√≥n completa de cada tarea (t√≠tulo, descripci√≥n, asignado)
- ‚úÖ Integraci√≥n sin errores con Linear API

**Tech Stack:** Linear GraphQL API, Telegraf.js
    `,
    category: "integration",
    priority: 1,
    estimatedTokens: 2500,
    dependencies: []
  },
  
  {
    title: "RELY-51: GitHub Repository Selection",
    description: `
**Objetivo:** Permitir selecci√≥n y vinculaci√≥n de repositorios GitHub espec√≠ficos

**Especificaciones:**
- Comando /repos que liste repositorios accesibles
- Selecci√≥n m√∫ltiple de repos para el proyecto
- Validaci√≥n de permisos de escritura
- Cache de estructura de repos seleccionados
- Vinculaci√≥n tarea Linear ‚Üî repo GitHub

**Criterios de aceptaci√≥n:**
- ‚úÖ Lista de repos con permisos de escritura
- ‚úÖ Selecci√≥n persistente de repos por proyecto  
- ‚úÖ Validaci√≥n de acceso y permisos
- ‚úÖ Cache de estructura de directorios

**Tech Stack:** GitHub REST API, Octokit.js
    `,
    category: "integration", 
    priority: 2,
    estimatedTokens: 3000,
    dependencies: ["RELY-50"]
  },

  {
    title: "RELY-52: Enhanced Task Atomizer con contexto Linear+GitHub",
    description: `
**Objetivo:** Mejorar atomizador con contexto completo de Linear y estructura GitHub

**Especificaciones:**
- Atomizar tareas Linear con contexto del repo
- An√°lisis de estructura de archivos existente
- Generaci√≥n de comandos Docker espec√≠ficos
- C√°lculo preciso de costos por tarea
- Dependencias autom√°ticas basadas en archivos

**Criterios de aceptaci√≥n:**
- ‚úÖ Atomizaci√≥n considera estructura actual del repo
- ‚úÖ Comandos Docker espec√≠ficos y ejecutables
- ‚úÖ Estimaci√≥n precisa de tokens/costos
- ‚úÖ Detecci√≥n autom√°tica de dependencias

**Tech Stack:** Claude API, GitHub Tree API, Docker
    `,
    category: "core",
    priority: 3, 
    estimatedTokens: 4000,
    dependencies: ["RELY-51"]
  },

  {
    title: "RELY-53: VPS Docker Orchestration System",
    description: `
**Objetivo:** Sistema de orquestaci√≥n Docker en VPS con permisos absolutos

**Especificaciones:**
- Conexi√≥n SSH autom√°tica a VPS
- Creaci√≥n de contenedores con vol√∫menes completos
- Instalaci√≥n autom√°tica de dependencias
- Acceso completo a filesystem del proyecto
- Monitoreo de recursos (CPU, RAM, Disk)

**Criterios de aceptaci√≥n:**
- ‚úÖ Conexi√≥n autom√°tica a VPS via SSH
- ‚úÖ Contenedores con acceso completo al proyecto
- ‚úÖ Instalaci√≥n autom√°tica de tech stack
- ‚úÖ Monitoreo de recursos en tiempo real

**Tech Stack:** Docker Remote API, SSH2, Node.js
    `,
    category: "infrastructure",
    priority: 4,
    estimatedTokens: 5000, 
    dependencies: ["RELY-52"]
  },

  {
    title: "RELY-54: Auto-Testing & Quality Assurance System",
    description: `
**Objetivo:** Sistema autom√°tico de testing completo antes de push

**Especificaciones:**
- Detecci√≥n autom√°tica de framework de testing
- Ejecuci√≥n de tests unitarios, integraci√≥n y E2E
- Linting y formateo autom√°tico
- Build verification antes de push
- Reportes detallados de cobertura

**Criterios de aceptaci√≥n:**
- ‚úÖ Detecci√≥n autom√°tica de Jest/Mocha/Cypress
- ‚úÖ Ejecuci√≥n completa de test suite
- ‚úÖ Linting autom√°tico (ESLint, Prettier)
- ‚úÖ Build exitoso verificado
- ‚úÖ Reportes de cobertura y calidad

**Tech Stack:** Jest, ESLint, Prettier, framework-agnostic
    `,
    category: "quality",
    priority: 5,
    estimatedTokens: 3500,
    dependencies: ["RELY-53"]
  },

  {
    title: "RELY-55: Smart Branch Management & Auto-Push",
    description: `
**Objetivo:** Manejo inteligente de branches y push autom√°tico

**Especificaciones:**
- Creaci√≥n autom√°tica de feature branches
- Nomenclatura basada en tarea Linear (RELY-XX/descripcion)
- Commits descriptivos autom√°ticos
- Push autom√°tico solo si tests pasan
- Pull request autom√°tico con template

**Criterios de aceptaci√≥n:**
- ‚úÖ Branch creado autom√°ticamente con nombre correcto
- ‚úÖ Commits siguiendo conventional commits
- ‚úÖ Push solo despu√©s de tests exitosos
- ‚úÖ PR autom√°tico con descripci√≥n completa

**Tech Stack:** Git, GitHub API, Conventional Commits
    `,
    category: "automation",
    priority: 6,
    estimatedTokens: 2800,
    dependencies: ["RELY-54"]
  },

  {
    title: "RELY-56: Multi-Instance Dashboard & Real-time Monitoring",
    description: `
**Objetivo:** Dashboard para monitorear m√∫ltiples instancias concurrentes

**Especificaciones:**
- Vista de todas las instancias activas
- Estado en tiempo real de cada contenedor
- Logs streaming en vivo
- M√©tricas de progreso y performance
- Controles play/pause/stop por instancia

**Criterios de aceptaci√≥n:**
- ‚úÖ Dashboard con todas las instancias
- ‚úÖ Estados actualizados cada 10 segundos
- ‚úÖ Streaming de logs en tiempo real
- ‚úÖ Controles granulares por instancia
- ‚úÖ M√©tricas de CPU/RAM/progreso

**Tech Stack:** WebSockets, Docker Stats API, Telegraf inline keyboards
    `,
    category: "monitoring",
    priority: 7,
    estimatedTokens: 4500,
    dependencies: ["RELY-55"]
  },

  {
    title: "RELY-57: Cost Tracking & Budget Management",
    description: `
**Objetivo:** Tracking preciso de costos y manejo de presupuestos

**Especificaciones:**
- C√°lculo en tiempo real de costos por token
- Presupuestos por proyecto y alertas
- Optimizaci√≥n autom√°tica de prompts
- Reportes de eficiencia y ROI
- L√≠mites autom√°ticos de gasto

**Criterios de aceptaci√≥n:**
- ‚úÖ Tracking preciso de tokens Claude + GitHub
- ‚úÖ Alertas autom√°ticas al 80% del presupuesto
- ‚úÖ Optimizaci√≥n de prompts para reducir costos
- ‚úÖ Reportes detallados de ROI por tarea

**Tech Stack:** Claude API Usage, GitHub API limits, SQLite analytics
    `,
    category: "analytics",
    priority: 8,
    estimatedTokens: 3000,
    dependencies: ["RELY-56"]
  },

  {
    title: "RELY-58: Advanced LangGraph Workflows",
    description: `
**Objetivo:** Workflows LangGraph avanzados para casos complejos

**Especificaciones:**
- Workflow de debugging autom√°tico
- Retry inteligente con an√°lisis de errores
- Optimizaci√≥n de orden de ejecuci√≥n
- Paralelizaci√≥n autom√°tica de tareas independientes
- Self-healing en caso de fallos

**Criterios de aceptaci√≥n:**
- ‚úÖ Debugging autom√°tico con Claude
- ‚úÖ Retry inteligente basado en tipo de error
- ‚úÖ Optimizaci√≥n din√°mica del orden
- ‚úÖ Ejecuci√≥n paralela cuando es posible
- ‚úÖ Recovery autom√°tico de fallos menores

**Tech Stack:** LangGraph, Claude API, Docker Swarm
    `,
    category: "intelligence",
    priority: 9,
    estimatedTokens: 6000,
    dependencies: ["RELY-57"]
  },

  {
    title: "RELY-59: Production Deployment & Scaling",
    description: `
**Objetivo:** Deploy a producci√≥n con escalabilidad autom√°tica

**Especificaciones:**
- Deploy autom√°tico a Railway/Render
- Escalabilidad horizontal autom√°tica
- Load balancing para m√∫ltiples bots
- Backup autom√°tico de datos
- Monitoring de uptime y performance

**Criterios de aceptaci√≥n:**
- ‚úÖ Deploy autom√°tico desde main branch
- ‚úÖ Escalabilidad basada en carga
- ‚úÖ Load balancer configurado
- ‚úÖ Backups diarios autom√°ticos
- ‚úÖ Alertas de downtime < 30 segundos

**Tech Stack:** Railway, Docker Compose, Redis Cluster, PostgreSQL
    `,
    category: "deployment",
    priority: 10,
    estimatedTokens: 4000,
    dependencies: ["RELY-58"]
  }
];

async function createLinearRoadmap() {
  console.log('üöÄ Creando roadmap completo en Linear...');
  
  try {
    // Test connection
    const viewer = await testConnection();
    console.log(`Connected as: ${viewer.name}`);
    
    // Get teams
    const teams = await getTeams();
    console.log('Available teams:', teams.map(t => `${t.name} (${t.key})`).join(', '));
    
    // Use first team or find specific team
    const team = teams.find(t => t.name.includes('Development')) || teams[0];
    console.log(`Using team: ${team.name}`);
    
    // Create project for the roadmap
    const project = await createProject(
      'Telegram Task Agent - Enhanced System',
      'Sistema completo de agentes atomizados con Linear + GitHub + VPS integration',
      team.id
    );
    
    console.log(`‚úÖ Project created: ${project.name}`);
    console.log(`üîó URL: ${project.url}`);
    
    // Create all issues
    console.log('\nüìã Creating issues...');
    const createdIssues = [];
    
    for (const task of ROADMAP_TASKS) {
      console.log(`Creating: ${task.title}`);
      
      const issue = await createIssue(
        task.title,
        task.description,
        team.id,
        project.id,
        task.priority
      );
      
      createdIssues.push({
        ...issue,
        category: task.category,
        estimatedTokens: task.estimatedTokens,
        dependencies: task.dependencies
      });
      
      console.log(`‚úÖ ${issue.identifier}: ${issue.title}`);
      
      // Small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log('\nüéâ Roadmap completo creado!');
    console.log(`üìä Total tareas: ${createdIssues.length}`);
    console.log(`üí∞ Tokens estimados totales: ${ROADMAP_TASKS.reduce((sum, task) => sum + task.estimatedTokens, 0)}`);
    console.log(`üîó Linear Project: ${project.url}`);
    
    // Show execution order
    console.log('\nüìÖ Orden de ejecuci√≥n recomendado:');
    ROADMAP_TASKS
      .sort((a, b) => a.priority - b.priority)
      .forEach((task, index) => {
        console.log(`${index + 1}. ${task.title} (${task.estimatedTokens} tokens)`);
      });
    
    return {
      project,
      issues: createdIssues,
      totalTasks: createdIssues.length,
      totalTokens: ROADMAP_TASKS.reduce((sum, task) => sum + task.estimatedTokens, 0)
    };
    
  } catch (error) {
    console.error('‚ùå Error creating roadmap:', error);
    throw error;
  }
}

// Execute if run directly
if (require.main === module) {
  createLinearRoadmap()
    .then(result => {
      console.log('\n‚úÖ Roadmap creation completed!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Failed to create roadmap:', error);
      process.exit(1);
    });
}

module.exports = { createLinearRoadmap, ROADMAP_TASKS };