# =================================================================
# Docker Compose para Testing Integral en VPS
# Sistema Background Agents con Claude CLI real
# =================================================================

version: '3.8'

services:
  # Bot principal
  telegram-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: telegram-task-agent
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Cargar variables desde .env.production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LINEAR_API_KEY=${LINEAR_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_PATH=${DATABASE_PATH}
      - DOCKER_WORKSPACE_PATH=${DOCKER_WORKSPACE_PATH}
      - DOCKER_MOCK_MODE=${DOCKER_MOCK_MODE}
      - MAX_DOCKER_INSTANCES=${MAX_DOCKER_INSTANCES}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      # Docker socket para crear agentes
      - /var/run/docker.sock:/var/run/docker.sock
      # Workspace para agentes
      - ${DOCKER_WORKSPACE_PATH}:/workspace
      # Base de datos persistente
      - ./data:/app/data
      # Logs del sistema
      - ./logs:/app/logs
      # Montaje de Claude CLI desde host
      - /usr/local/bin/claude:/usr/local/bin/claude:ro
      - /root/.claude:/root/.claude:ro
    networks:
      - agent-network
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  # Base de datos SQLite con persistencia
  db:
    image: alpine:latest
    container_name: telegram-db
    restart: unless-stopped
    volumes:
      - ./data:/data
    command: sh -c "
      mkdir -p /data &&
      touch /data/tasks.db /data/agents.db /data/project_mappings.db &&
      chmod 666 /data/*.db &&
      echo 'Database initialized' &&
      tail -f /dev/null"
    networks:
      - agent-network

  # Monitoring y logs (opcional)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: telegram-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_INCLUDE_STOPPED=true
    networks:
      - agent-network

networks:
  agent-network:
    driver: bridge
    name: telegram-agent-network

volumes:
  # Vol√∫menes persistentes
  workspace-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_WORKSPACE_PATH}
  
  database-data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ./data